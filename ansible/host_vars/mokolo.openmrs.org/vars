---
# Docker host (jetstream) for sonarqube
users:
 raff:
  comment: Rafal
  groups: 'admin'
  ssh_key: "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAgc4Q+9e1XMDInFm4GNkuYErYkgDt0KNnmLDTFa+0HV1MuQKP+TE3Ee9Qdx5rugNkg9+e45Hzfze/vX/nYjrNAkWcxYaxEAdej/6QW4Bh4r6rRLnNoqnksG3+WVXl2cqOf9odji2L+uzA2E+zX5tEYqVkN9+0z1Ewwe6lcSg0zRQyJ+phIo595eftYJGAiLAhIfSotg8SxWJhSHUsNtphyXRld7FtxXDgfu6SkejvakymwXEuMe7yS2mES9U8IlJh4CyADGaqb0WSWfqsejcgMuXJmnEqpMqVwcDaP4B+NZLTKfUUlc2D8DiUKRqlnxuGCFmkpghTQkX4dE0YhxJSjQ== raff"


datadog_config:
  tags: "provider:jetstream-iu,environment:{{datadog_environment}},backup:{{backup_tag}},service:sonarqube,ansible:full,provisioner:terraform"

docker_deployment: []

docker_deployable_images: []

letsencrypt_cert_domains:
  - mokolo.openmrs.org
  - sonar-new.openmrs.org

nginx_vhosts:
 - listen: "80 default_server"
   server_name: "sonar-new.openmrs.org"
   extra_parameters: |
     return 301 https://$host$request_uri;
 - listen: "443 ssl"
   server_name: "sonar-new.openmrs.org"
   extra_parameters: |
     access_log /var/log/nginx/sonar_access.log;
     error_log /var/log/nginx/sync1_error.log;
     ssl_certificate /etc/letsencrypt/live/mokolo.openmrs.org/fullchain.pem;
     ssl_certificate_key /etc/letsencrypt/live/mokolo.openmrs.org/privkey.pem;
     location ^~ /.well-known/acme-challenge/ {
       root /usr/share/nginx/html;
     }
     location / {
       return 301 https://sonar-new.openmrs.org/openmrs;
     }
     location /sonar {
       proxy_set_header HOST $host;
       proxy_set_header  X-Forwarded-Proto $scheme;
       proxy_pass http://127.0.0.1:8080/sonar;
     }
 - listen: "443 ssl"
   server_name: "mokolo.openmrs.org"
   extra_parameters: |
     access_log /var/log/nginx/deployer_access.log;
     error_log /var/log/nginx/deployer_error.log;
     ssl_certificate /etc/letsencrypt/live/mokolo.openmrs.org/fullchain.pem;
     ssl_certificate_key /etc/letsencrypt/live/mokolo.openmrs.org/privkey.pem;
     location ^~ /.well-known/acme-challenge/ {
       root /usr/share/nginx/html;
     }
     location / {
       proxy_pass http://127.0.0.1:3000/;
     }

aws_access_key_id: '{{ vault_aws_access_key_id }}'
aws_secret_access_key: '{{ vault_aws_secret_access_key }}'
